# - Try to find the libssh2 library
# Once done this will define
#
# LIBSSH2_FOUND - system has the libssh2 library
# LIBSSH2_INCLUDE_DIR - the libssh2 include directory
# LIBSSH2_LIBRARY - the libssh2 library name

if (LIBSSH2_INCLUDE_DIR AND LIBSSH2_LIBRARY)
  set(LIBSSH2_FIND_QUIETLY TRUE)
endif (LIBSSH2_INCLUDE_DIR AND LIBSSH2_LIBRARY)

FIND_PATH(LIBSSH2_INCLUDE_DIR libssh2.h)

FIND_LIBRARY(LIBSSH2_LIBRARY NAMES ssh2 libssh2)

MESSAGE(STATUS "statt ${LIBSSH2_INCLUDE_DIR}   ${LIBSSH2_LIBRARY}")

if(LIBSSH2_INCLUDE_DIR)
  file(STRINGS "${LIBSSH2_INCLUDE_DIR}/libssh2.h" libssh2_version_str REGEX "^#define[\t ]+LIBSSH2_VERSION_NUM[\t ]+0x[0-9][0-9][0-9][0-9][0-9][0-9].*")

  string(REGEX REPLACE "^.*LIBSSH2_VERSION_NUM[\t ]+0x([0-9][0-9]).*$" "\\1" LIBSSH2_VERSION_MAJOR "${libssh2_version_str}")
  string(REGEX REPLACE "^.*LIBSSH2_VERSION_NUM[\t ]+0x[0-9][0-9]([0-9][0-9]).*$" "\\1" LIBSSH2_VERSION_MINOR  "${libssh2_version_str}")
  string(REGEX REPLACE "^.*LIBSSH2_VERSION_NUM[\t ]+0x[0-9][0-9][0-9][0-9]([0-9][0-9]).*$" "\\1" LIBSSH2_VERSION_PATCH "${libssh2_version_str}")

  string(REGEX REPLACE "^0(.+)" "\\1" LIBSSH2_VERSION_MAJOR "${LIBSSH2_VERSION_MAJOR}")
  string(REGEX REPLACE "^0(.+)" "\\1" LIBSSH2_VERSION_MINOR "${LIBSSH2_VERSION_MINOR}")
  string(REGEX REPLACE "^0(.+)" "\\1" LIBSSH2_VERSION_PATCH "${LIBSSH2_VERSION_PATCH}")

  set(LIBSSH2_VERSION "${LIBSSH2_VERSION_MAJOR}.${LIBSSH2_VERSION_MINOR}.${LIBSSH2_VERSION_PATCH}")
endif(LIBSSH2_INCLUDE_DIR)

include(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Libssh2 DEFAULT_MSG LIBSSH2_INCLUDE_DIR LIBSSH2_LIBRARY )

MARK_AS_ADVANCED(LIBSSH2_INCLUDE_DIR LIBSSH2_LIBRARY LIBSSH2_VERSION_MAJOR LIBSSH2_VERSION_MINOR LIBSSH2_VERSION_PATCH LIBSSH2_VERSION)




if(LIBSSH2_FOUND)
    set(LIBSSH2_INCLUDE_DIRS ${LIBSSH2_INCLUDE_DIR})

    if(NOT LIBSSH2_LIBRARIES)
      set(LIBSSH2_LIBRARIES ${LIBSSH2_LIBRARY})
    endif()

    if(NOT TARGET Libssh2::libssh2)
      add_library(Libssh2::libssh2 UNKNOWN IMPORTED)
      set_target_properties(Libssh2::libssh2 PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES "${LIBSSH2_INCLUDE_DIRS}")

      if(LIBSSH2_LIBRARY_RELEASE)
        set_property(TARGET Libssh2::libssh2 APPEND PROPERTY
          IMPORTED_CONFIGURATIONS RELEASE)
        set_target_properties(Libssh2::libssh2 PROPERTIES
          IMPORTED_LOCATION_RELEASE "${LIBSSH2_LIBRARY_RELEASE}")
      endif()

      if(LIBSSH2_LIBRARY_DEBUG)
        set_property(TARGET Libssh2::libssh2 APPEND PROPERTY
          IMPORTED_CONFIGURATIONS DEBUG)
        set_target_properties(Libssh2::libssh2 PROPERTIES
          IMPORTED_LOCATION_DEBUG "${LIBSSH2_LIBRARY_DEBUG}")
      endif()

      if(NOT LIBSSH2_LIBRARY_RELEASE AND NOT LIBSSH2_LIBRARY_DEBUG)
        set_property(TARGET Libssh2::libssh2 APPEND PROPERTY
          IMPORTED_LOCATION "${LIBSSH2_LIBRARY}")
      endif()
    endif()
endif()
